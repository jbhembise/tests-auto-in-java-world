import com.thoughtworks.gauge.gradle.GaugeTask // For Gauge

buildscript {
    repositories {
        mavenCentral()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:${gradleKotlinPluginVersion}" // For Spek framework
        classpath "info.solidsoft.gradle.pitest:gradle-pitest-plugin:${gradlePitestPluginVersion}" // For test mutation (Pitest)
        classpath "net.saliman:gradle-cobertura-plugin:${gradleCoberturaPluginVersion}" // For Cobertura
        classpath "com.thoughtworks.gauge.gradle:gauge-gradle-plugin:+" // For Gauge
        classpath "com.tngtech.jgiven:jgiven-gradle-plugin:${gradleJGivenPluginVersion}" // For JGiven HTML reports
        classpath "net.serenity-bdd:serenity-gradle-plugin:${gradleSerenityPluginVersion}" // For Serenity BDD
    }
}

apply plugin: 'java'
apply plugin: 'groovy' // For Spock framework
apply plugin: 'kotlin' // For Spek framework
apply plugin: 'info.solidsoft.pitest' // For test mutation (Pitest)
apply plugin: "jacoco" // For Jacoco
apply plugin: 'net.saliman.cobertura' // For Cobertura
apply plugin: 'gauge' // For Gauge framework
apply plugin: 'com.tngtech.jgiven.gradle-plugin' // For JGiven
apply plugin: 'net.serenity-bdd.aggregator' // For Serenity BDD

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    mavenCentral()
}

dependencies {
    // Lombok
    annotationProcessor group: 'org.projectlombok', name: 'lombok', version: "${lombokVersion}"
    implementation group: 'org.projectlombok', name: 'lombok', version: "${lombokVersion}"

    // Logback
    implementation group: 'ch.qos.logback', name: 'logback-classic', version: "${logbackVersion}"

    // JUnit framework
    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: "${junit5Version}"
    testRuntimeOnly group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: "${junit5Version}"
    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-params', version: "${junit5Version}"
    testImplementation group: 'org.junit.vintage', name: 'junit-vintage-engine', version: "${junit5Version}"
    testImplementation group: 'org.junit.platform', name: 'junit-platform-runner', version: "${junitPlatformVersion}"
    testImplementation group: 'org.junit.platform', name: 'junit-platform-suite-api', version: "${junitPlatformVersion}"

    // JUnit data provider library
    testImplementation group: 'com.tngtech.java', name: 'junit-dataprovider', version: "${junitDataproviderVersion}"

    // TestNG framework
    testImplementation group: 'org.testng', name: 'testng', version: "${testNgVersion}"

    // Spock framework
    testImplementation group: 'org.codehaus.groovy', name: 'groovy-all', version: "${groovyVersion}"
    testImplementation group: 'org.spockframework', name: 'spock-core', version: "${spockVersion}"
    testImplementation(group: 'com.athaydes', name: 'spock-reports', version: "${spockReportsVersion}") {
        transitive = false // this avoids affecting your version of Groovy/Spock
    }

    // Spek framework
    testImplementation group: 'org.jetbrains.spek', name: 'spek-api', version: "${spekVersion}"
    testRuntimeOnly group: 'org.jetbrains.spek', name: 'spek-junit-platform-engine', version: "${spekVersion}"

    // Cucumber + Gherkin framework
    testImplementation group: 'info.cukes', name: 'cucumber-java', version: "${cucumberVersion}"
    testImplementation group: 'info.cukes', name: 'cucumber-junit', version: "${cucumberVersion}"
    testImplementation group: 'info.cukes', name: 'cucumber-picocontainer', version: "${cucumberVersion}"
    testImplementation group: 'net.masterthought', name: 'cucumber-reporting', version: "${cucumberReportsVersion}"

    // JGiven framework
    testImplementation group: 'com.tngtech.jgiven', name: 'jgiven-junit', version: "${jgivenVersion}"
    testImplementation group: 'com.tngtech.jgiven', name: 'jgiven-html5-report', version: "${jgivenVersion}"

    // JBehave framework
    testImplementation group: 'org.jbehave', name: 'jbehave-core', version: "${jbehaveVersion}"

    // AssertJ library
    testImplementation group: 'org.assertj', name: 'assertj-core', version: "${assertjVersion}"

    // Google Truth library
    testImplementation group: 'com.google.truth', name: 'truth', version: "${truthVersion}"

    // Jqwik
    testImplementation group: 'net.jqwik', name: 'jqwik', version: "${jqwikVersion}"

    // Junit-Quickcheck
    testImplementation group: 'com.pholser', name: 'junit-quickcheck-core', version: "${junitQuickCheckVersion}"
    testImplementation group: 'com.pholser', name: 'junit-quickcheck-generators', version: "${junitQuickCheckVersion}"

    // Mockito
    testImplementation group: 'org.mockito', name: 'mockito-core', version: "${mockitoVersion}"

    // JMock
    testImplementation group: 'org.jmock', name: 'jmock-junit4', version: "${jmockVersion}"
    testImplementation group: 'org.jmock', name: 'jmock-legacy', version: "${jmockVersion}"

    // JMockit
    testCompile group: 'org.jmockit', name: 'jmockit', version: "${jmockitVersion}"

    // EasyMock
    testImplementation group: 'org.easymock', name: 'easymock', version: "${easymockVersion}"

    // Gauge
    testCompile group: 'com.thoughtworks.gauge', name: 'gauge-java', version: "${gaugeVersion}"

    // Serenity BDD
    testImplementation group: 'net.serenity-bdd', name: 'serenity-core', version: "${serenityBddVersion}"
    testImplementation group: 'net.serenity-bdd', name: 'serenity-junit', version: "${serenityBddVersion}"

    // QuickTheories
    testImplementation group: 'org.quicktheories', name: 'quicktheories', version: "${quickTheoriesVersion}"
}

// Default configuration for Gradle test tasks
tasks.withType(Test) {
    // log every test result
    testLogging {
        events "passed", "skipped", "failed"
    }

    // test summary (displayed at the end)
    afterSuite { desc, result ->
        if (!desc.parent) {
            println "\nTest result: ${result.resultType}"
            println "Test summary: ${result.testCount} tests, " +
                    "${result.successfulTestCount} succeeded, " +
                    "${result.failedTestCount} failed, " +
                    "${result.skippedTestCount} skipped"
        }
    }
}

test {
    // enable JUnit5 tests
    useJUnitPlatform()

    // To make JMockit works !
    def jmockit = configurations.testCompile.files.find { it.name.contains("jmockit") }.absolutePath
    jvmArgs "-javaagent:$jmockit"

    // To generate JGiven HTML report at the end
    finalizedBy jgivenTestReport
}

task testNG(type: Test) {
    // enable TestNG support (default is JUnit)
    useTestNG()
}

check.dependsOn(testNG)

task testSpock(type: Test) {
    include '**/spock/**'
}

task testSpek(type: Test) {
    include '**/spek/**'
    useJUnitPlatform()
}

task testCucumber(type: Test) {
    include '**/cucumber/**'
}

task testJBehave(type: Test) {
    include '**/jbehave/**'
}

task testJGiven(type: Test) {
    include '**/jgiven/**'
}

task testJUnit4(type: Test) {
    include '**/junit4/**'
}

task testJUnit5(type: Test) {
    include '**/junit5/**'
    useJUnitPlatform()
}

task testJqwik(type: Test) {
    include '**/jqwik/**'
    useJUnitPlatform()
}

task testJunitQuickCheck(type: Test) {
    include '**/junitquickcheck/**'
}

task testJMock(type: Test) {
    include '**/jmock/**'
}

task testMockito(type: Test) {
    include '**/mockito/**'
}

task testEasyMock(type: Test) {
    include '**/easymock/**'
}

pitest {
    threads = 4
    targetClasses = ['jbhembise.testauto.mutation.*']
    targetTests = ['jbhembise.testauto.mutation.*']
    outputFormats = ['HTML']
}

task testJMockit(type: Test) {
    include '**/jmockit/**'
    def jmockit = configurations.testCompile.files.find { it.name.contains("jmockit") }.absolutePath
    jvmArgs "-javaagent:$jmockit"
}

jacocoTestReport {
    reports {
        html.enabled true
    }
    dependsOn check
}

coberturaReport {
    dependsOn check
}

gauge {
    specsDir = 'src/test/resources/jbhembise/testauto/gauge'
    additionalFlags = '--verbose'
}

tasks.withType(GaugeTask) {
    def jmockit = configurations.testCompile.files.find { it.name.contains("jmockit") }.absolutePath
    jvmArgs "-javaagent:$jmockit"
    include '**/gauge/**'
}

task testGauge(type: GaugeTask) {
    doFirst {
        gauge {
            specsDir = 'src/test/resources/jbhembise/testauto/gauge'
            additionalFlags = '--verbose'
        }
    }
}

task testAssertions(type: Test) {
    include '**/assertions/**'
    useJUnitPlatform()
}

task testSerenityBDD(type: Test) {
    include '**/serenitybdd/**'
}

task testQuickTheories(type: Test) {
    include '**/quicktheories/**'
}
